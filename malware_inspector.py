#! /usr/bin/env python
import os
import hashlib
import time
import subprocess
import sys
import datetime
import urllib
import urllib2

import simplejson

from malware_inspector_config import config
from malware_inspector_config import sqlite_class


file_read_bytes = 8192


def md5checksum(filePath, config):
	"""compute MD5 checksum"""
	try:
		with open(filePath, 'rb') as f:
			m = hashlib.md5()
			while True:
				data = f.read(file_read_bytes)
				if not data:
					break
				m.update(data)
			config.logger.debug("file - %s and its md5 hash value is %s" % (filePath, m.hexdigest()))
			return m.hexdigest()
	except Exception, e:
		config.logger.error("Error while calculating md5 hash for file - %s " % filePath)


def check_dns_connectivity(ip):
	import socket

	host = None
	try:
		host = socket.gethostbyaddr(ip)
		return True
	except Exception:
		return False


def check_internet_connectivity(config):
	url = 'http://www.google.com'
	proxy_handler = None
	if config.use_proxy.lower() == "true":
		proxy_handler = _setup_proxy(config.proxy_host, config.proxy_port, config.proxy_user, config.proxy_password)
		urllib2.install_opener(proxy_handler)
	try:
		conn = urllib2.urlopen(url)
		response = conn.read()

		if response:
			return True
		else:
			return False

	except Exception, e:
		config.logger.error("Error in checking internet connectivity - %s" % str(e).strip())


def _setup_proxy(name, port, user, passwd):
	opener = None
	proxy = urllib2.ProxyHandler({'http': 'http://' + user + ':' + passwd + '@' + name + ':' + port,
	                              'https': 'http://' + user + ':' + passwd + '@' + name + ':' + port})
	auth = urllib2.HTTPBasicAuthHandler()
	opener = urllib2.build_opener(proxy, auth, urllib2.HTTPHandler)
	return opener


def process_status(pid):
	"""
        find process state

        D Uninterruptible sleep (usually IO)
        R Running or runnable (on run queue)
        S Interruptible sleep (waiting for an event to complete)
        T Stopped, either by a job control signal or because it is being traced.
        W paging (not valid since the 2.6.xx kernel)
        X dead (should never be seen)
        Z Defunct ("zombie") process, terminated but not reaped by its parent.
    """
	try:
		for line in open("/proc/%s/status" % pid).readlines():
			if line.startswith("State:"):
				return line.split(":", 1)[1].strip().split(' ')[0]
		return None
	except Exception, e:
		config.logger.error("Error while reading process state for pid - " % pid)


def file_timestamps(filename):
	"""file creation and modification timestamps"""
	if os.path.isfile(filename):
		last_modified = time.ctime(os.path.getmtime(filename))
		created_on = time.ctime(os.path.getctime(filename))
		return created_on, last_modified

#####################################################################
# Procedures for checking virus/malware using Team Cymru Malware hash registry
# ###################################################################

def run_command(exec_command, timeout=10, poll_seconds=0.25):
	""" run the command as a seperate process"""
	try:
		proc = subprocess.Popen(exec_command, bufsize=0, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
		deadline = time.time() + float(timeout)
		while time.time() < deadline and proc.poll() == None:
			time.sleep(float(poll_seconds))
		stdout, stderr = proc.communicate()
		return stdout, stderr
	except Exception, e:
		config.logger.error("Error while executing the command - %s" % exec_command)


def query_malware_hash_registry(md5_hash, config):
	""" query malware hash registry to check whether the process is malware"""
	try:
		_cmd = "nslookup -querytype=TXT " + md5_hash + '.' + config.team_cymru_url #'.malware.hash.cymru.com'
		response, error = run_command(_cmd, config.timeout_interval, config.polling_interval)
		config.logger.debug("Team Cymru malware hash registry response - %s" % response)
		return response, error
	except Exception, e:
		config.logger.error("Error while executing command - %s and the error is - %s" % (_cmd, e))


def process_team_cymru_response(md5_hash, response, config):
	try:
		response = response.split('\n')
		for item in response:
			if item.find(md5_hash + '.' + config.team_cymru_url) >= 0:
				malware_line = item
				if malware_line.lower().find('nxdomain') >= 0:
					# no malware present: percent_detection=0,last_detection=current time
					return False, datetime.datetime.now(),0
				else:
					malware_details = malware_line.strip().split('=')[1]
					last_updated, percent_detection = malware_details.replace('"', '').strip().split(' ')
					#print last_updated,percent_detection
					return True, datetime.datetime.fromtimestamp(long(last_updated)), percent_detection

	except Exception, e:
		config.logger.error("Error while processing Team Cymru's response - %s and the error is - %s" % (response, e))


def update_scan_entry_teamcymru(config,test_process,process_id):

	response, error = query_malware_hash_registry(test_process[3], config)
	# add delay of 1 sec for each TXT query to team cymru hash registry
	time.sleep(1)
	Ismalware, last_detected, percent_detection = process_team_cymru_response(test_process[3], response, config)
	if Ismalware:
		config.logger.info(
			"Process -%s is possibly a virus/malware. Kindly re-check it using other anti-virus/anti-spyware softwares." %
			test_process[1])
		# team_cymru_virus_process.append(item)
		# team cymru response contains  - when it was last seen and what is % that it will be detected by anti-virus softwares.

	sqlite_instance.execute_query( \
		"insert into malware_teamcymru_scan(last_seen,percent_detection,process_id,ismalware) values (?,?,?,?)", \
		(last_detected, percent_detection, process_id, Ismalware))

	config.logger.info(
		"Executing the query - insert into malware_teamcymru_scan(last_seen,percent_detection,\
            process_id,ismalware) values (%s,%s,%s,%s)" % (last_detected, percent_detection, \
			                                                   process_id, Ismalware))
	return Ismalware

def malware_processes_using_team_cymru(config, process_list, sqlite_instance):
	""" find out malware processes using team cymru hash registry"""
	try:
		team_cymru_virus_process = []
		process_db_check = None
		cymru_process_check = None
		Ismalware = False

		for item in process_list:

		# item consists of - process_pid, process_full_path, filesize, md5_result, process_path, process_name, \
		# process_state, created_on,last_modified

			#check if the process exists in database - process name (its full path) and md5 hash are same or changed
			process_db_check = sqlite_instance.getrow(
				"select id,last_updated_date from malware_process where full_path = ? and md5_hash = ?",
				(item[1], item[3]))

			# check if the process is previously checked using Team Cymru malware hash registry
			if process_db_check:
				cymru_process_check = sqlite_instance.getrow(
					"select id,ismalware from malware_teamcymru_scan where process_id = ?", (process_db_check[0][0],))

			# if the process exists, a row will be returned. If no row is returned, insert present process into the
			# database and do malware check using team cymru malware hash repository.
			if not process_db_check:
			# insert process in to the database
				process_name, process_path, process, md5_result, created_on, last_modified, process_state, filesize \
					= item[5], item[4], item[1], item[3], item[7], item[8], item[6], item[2]

				#print process_name,process_path,process,md5_result,last_modified,process_state,filesize
				sqlite_instance.execute_query(
					"insert into malware_process(name,base_path,full_path,md5_hash,creation_date,last_updated_date, \
                     process_state,file_size) values (?,?,?,?,?,?,?,?)", \
					(process_name, process_path, process, md5_result, created_on, last_modified, process_state,
					 filesize))
				config.logger.info(
					"Executing the query - insert into malware_process(name,base_path,full_path,md5_hash,creation_date, \
                                           last_updated,process_state,file_size) values (%s,%s,%s,%s,%s,%s,%s,%s)" \
					% (process_name, process_path, process, md5_result, created_on, last_modified, process_state,
					   filesize))

				# get last inserted id in malware process table
				last_insert_id = sqlite_instance.last_insert_id()

				sqlite_instance.commit(True)

				Ismalware = update_scan_entry_teamcymru(config,item,last_insert_id)

			elif process_db_check and not cymru_process_check:
				#process exists in the database but it is not scanned using team cymru services
				Ismalware = update_scan_entry_teamcymru(config,item,process_db_check[0][0])
			else:
				if cymru_process_check[0][1]:
					team_cymru_virus_process.append(item)

		# return a list of malware processes
		return team_cymru_virus_process

	except Exception, e:
		config.logger.error("Error while finding out malware processes using Team Cymru - %s" % (e))

# ##################################################################
# Procedures for checking virus/malware using Google Virustotal API
# ##################################################################

# def virustotal_search_urllib(md5_hash, api_key):
# 	#SetProxiesIfNecessary()
# 	url = 'https://www.virustotal.com/vtapi/v2/file/report'
# 	parameters = {'resource': md5_hash, 'apikey': api_key}
# 	data = urllib.urlencode(parameters)
# 	req = urllib2.Request(url, data)
# 	response = urllib2.urlopen(req)
# 	json = response.read()
# 	response_dict = simplejson.loads(json)

def virustotal_filechecker(config, url, api_key, filename, md5_hash, proxy_handler=None):
	"""
        Check VirusTotal report for the given file's - MD5 hash
    """
	response = None

	Ismalware=False
	response_dict=None

	# request using proxy or not
	if proxy_handler:
		urllib2.install_opener(proxy_handler)
		# POST request parameters
	post_parameters = {"resource": md5_hash, "apikey": api_key}
	encoded_data = urllib.urlencode(post_parameters)
	req = urllib2.Request(url, encoded_data)
	try:
		response = urllib2.urlopen(req)
	except Exception, e:
		config.logger.error("Error while getting VirusTotal report for file - %s - %s." % (filename, str(e).strip()))

	report_result = response.read()
	# http response headers
	config.logger.debug("Http response headers:\n%s" % (response.info()))
	# http status codes
	config.logger.debug("Http response code:\n%s" % (response.getcode()))
	# http response
	config.logger.debug("Http response:\n%s" % (report_result))
	response_dict = simplejson.loads(report_result)
	if response_dict['response_code'] !=0:
		if response_dict['positives'] != 0:
			Ismalware = True
		else:
			Ismalware = False
	else:
		Ismalware=False
		response_dict=[]
	#if response_dict['response_code']==0:
	#	print "The file is not a malware as no result could be found in the virustotal database."
	#elif response_dict['response_code']==1:
	#	print "The file is a malware and %s virus engines have detected it. Detailed results found in the virustotal database are:" %response_dict['positives']
	#	for key,value in json['scans'].items():
	#		print key,value['result']
	return Ismalware, response_dict

def process_virustotal_response(conf,test_process):

	ismalware=None
	virus_details=None
	virustotal_scan_date=None

	if (config.virustotal_url and config.virustotal_api_key):

		# check whether to use proxy or not. If yes, set up proxy
		proxy_handler = None
		if config.use_proxy.lower() == 'true':
			proxy_handler = _setup_proxy(config.proxy_host, config.proxy_port, config.proxy_user,
			                             config.proxy_password)
			# parameter arguments - config_instance, virustotal_url,virustotal_key,filename,md5,proxy_handle
		ismalware, response = virustotal_filechecker(config, config.virustotal_url,
		                                             config.virustotal_api_key, test_process[5], test_process[3],
		                                             proxy_handler)
		if ismalware:
			# virustotal_virus_process.append(process)
			config.logger.info(
				'Process -%s is possibly a virus/malware. %s virus engines have detected it as virus/malware.\
            If you wish, please re-check it using other reputed anti-virus/anti-spyware softwares.' % (
					test_process[1], response['positives']))
			config.logger.debug(
				" Virus engines and virus names for the suspicious process are listed below:")
			for key, value in response['scans'].items():
				config.logger.info("Virus-engine-%s:%s" % (key, value['result']))
				# limitation of virustotal public API - maximum 4 request in a minute - 20 sec sleep time

		if response:
			virus_details = response['scans']
			if response['scan_date']:
				virustotal_scan_date = datetime.datetime.strptime(response['scan_date'],
				                                                  "%Y-%m-%d %H:%M:%S")
			else:
				virustotal_scan_date = datetime.datetime.now()
		else:
			virustotal_scan_date = datetime.datetime.now()
			virus_details = ''

	return ismalware,virus_details,virustotal_scan_date


def malware_processes_using_virustotal(config, process_list, sqlite_instance):
	try:
		virustotal_processes = []
		response = None
		process_db_check = None
		virustotal_process_check = None

		for item in process_list[:5]:
			#print item
			# item - (pid,process,filesize,md5_result,process_path,process_name,process_state,created_on,last_modified)
			config.logger.debug("Virustotal scan results for process - %s" % item[1])

			#check if the process exists in database - process name and md5 hash are same or changed
			process_db_check = sqlite_instance.getrow(
				"select id,last_updated_date from malware_process where full_path = ? and md5_hash = ?",
				(item[1], item[3]))
			#print process_db_check

			# check if the process has been scanned by virustotal scan previously.
			if process_db_check:
				virustotal_process_check = sqlite_instance.getrow(
					"select id,isvirus from malware_virustotal_scan where process_id = ?", (process_db_check[0][0],))

			# Since no process exists, insert the process into the database and do virus/malware check using \
			# virustotal hash repository

			if not process_db_check:
				if (config.virustotal_url and config.virustotal_api_key):
					ismalware,virus_details,virustotal_scan_date = process_virustotal_response(config,item)
					if ismalware:
						virustotal_processes.append(item)

					# form a tuple and update malware_process and malware_virustotal_scan table
					process_name, process_path, process, md5_result, created_on, last_modified, process_state, filesize = \
						item[5], item[4], \
						item[1], item[3], \
						item[7], item[8], \
						item[6], item[2]

					#print process_name,process_path,process,md5_result,last_modified,process_state,filesize
					sqlite_instance.execute_query(
						"insert into malware_process(name,base_path,full_path,md5_hash,created_on,last_updated_date,\
                        process_state,file_size) values (?,?,?,?,?,?,?,?)",
						(process_name, process_path, process, md5_result, created_on, last_modified, process_state,
						 filesize))
					config.logger.info(
						"Executing the query - insert into malware_process(name,base_path,full_path,md5_hash,created_on,\
                        last_updated_date,process_state,file_size) values (%s,%s,%s,%s,%s,%s,%s,%s)" % (
							process_name, process_path, process, md5_result, created_on, last_modified, process_state,
							filesize))
					# get last inserted id in malware process table
					last_insert_id = sqlite_instance.last_insert_id()

					#(item[8],virustotal_scan_date,last_insert_id,ismalware) : last_modified file date,virustotal scan_date,\
					# process_id, malware status in virustotal repository

					sqlite_instance.execute_query(
						" insert into malware_virustotal_scan(last_updated,virustotal_scan_date,virus_details,\
                        process_id,isvirus) values(?,?,?,?,?)", (item[8], virustotal_scan_date, str(response['scans']), \
						                                         last_insert_id, ismalware)
					)
					config.logger.info("Executing query - insert into malware_virustotal_scan(last_updated,\
                        virustotal_scan_date,process_id,isvirus)\
                        values(%s,%s,%s,%s) " % (item[8], virustotal_scan_date, last_insert_id, ismalware))

					sqlite_instance.commit(True)
					time.sleep(20) # only 4 requests per minutes as per Virustotal public API restrictions

				else:
					config.logger.error(
						"It seems that Virustotal api key is not entered in the configuration file -%s. The file \
                     will not be scanned using virustotal.")

			# process exists but no previous virustotal check has been done
			elif process_db_check and not (virustotal_process_check):

				if (config.virustotal_url and config.virustotal_api_key):
					ismalware,virus_details,virustotal_scan_date = process_virustotal_response(config,item)
					if ismalware:
						virustotal_processes.append(item)

					#(item[8],virustotal_scan_date,last_insert_id,ismalware) : last_modified file date,virustotal scan_date,\
					# process_id, malware status in virustotal repository
					sqlite_instance.execute_query(
						" insert into malware_virustotal_scan(last_updated,virustotal_scan_date,virus_details,\
                        process_id,isvirus) values(?,?,?,?,?)", (item[8], virustotal_scan_date, str(virus_details), \
						                                         process_db_check[0][0], ismalware)
					)
					config.logger.info("Executing query - insert into malware_virustotal_scan(last_updated,\
                        virustotal_scan_date,process_id,isvirus)\
                        values(%s,%s,%s,%s) " % (item[8], virustotal_scan_date, process_db_check[0][0], ismalware))

					sqlite_instance.commit(True)
					time.sleep(20) #only 4 requests per minutes as per Virustotal public API restrictions

				else:
					config.logger.error(
						"It seems that Virustotal api key is not entered in the configuration file -%s. The file \
                            will not be scanned using virustotal.")
			else:

				if virustotal_process_check[0][1]:
					virustotal_processes.append(item)

		return virustotal_processes

	except Exception, e:
		config.logger.error("Error while processing virustotal response - %s and the error is - %s" % (item, str(e)))


def write_malware_results(filename, cymru_process_list, virustotal_process_list):
	"""write malware results to the file"""
	with open(filename, 'w') as f:
		# process details - (pid,process,filesize,md5_result,process_path,process_name,process_state,created_on,last_modified)
		if cymru_process_list:
			f.write(
				"As per Team Cymru's Malware Database, the following processes are found to be suspicious on your computer.\n")
			f.write("Process\tPath\t\n")
			for item in process_list:
				f.write(item[5], item[1])
		f.write('\n\n\n')
		if virustotal_process_list:
			f.write("Virustotal scan shows that the following processes are suspicious on your computer.\n")
			f.write("Process\tPath\t\n")
			for item in process_list:
				f.write(item[5], item[1])


def mail_to_admin(malware_file, config):
	import smtplib, base64
	from email.mime.multipart import MIMEMultipart
	# Import the email modules we'll need
	from email.mime.text import MIMEText

	if os.path.isfile(malware_file) and os.path.getsize(malware_file) >= 0:
		with open(malware_file, 'r') as content_file:
			content = content_file.read()
		from_mail = config.email_user + '@' + config.email_server
		to_mail = config.email_user + '@' + config.email_server
		msg = MIMEMultipart('alternative')
		msg['Subject'] = 'Detection of malware processes on your PC'
		#msg['From'] = from_mail
		#msg['To'] = ','.join(to_mail)
		msg['From'] = config.email_user + '@' + config.email_server
		msg['To'] = config.email_user + '@' + config.email_server
		part1 = MIMEText(content, 'plain')
		#part2 = MIMEText(main_msg_html,'html')
		msg.attach(part1)
		#msg.attach(part2)
		try:
			so = smtplib.SMTP(config.email_server)
			so.docmd("AUTH LOGIN", base64.b64encode(config.email_user))
			so.docmd(base64.b64encode(config.email_passwd), "")
			#so.login(config.email_user,config.email_passwd)
			try:
				so.sendmail(from_mail, to_mail, msg.as_string())
			except Exception, e:
				config.logger.error("Error while sending e-mail about suspicious process %s- %s" % (malware_file, e))
			finally:
				so.close()
		except Exception, e:
			config.logger.error("Unable to send E-mail that lists suspicious processes - %s" % e)


if __name__ == '__main__':

	try:
		# config instance
		config = config.Config()
		sqlite_instance = sqlite_class.Sqlite_db(config.malware_results_database)
		sqlite_instance.connection()
		#print sqlite_instance.getrow("SELECT sqlite_version()",[])
		#print sqlite_instance.getrow("PRAGMA table_info (test)",[])

		# check if PC is connected to the internet
		if not check_internet_connectivity(config):
			config.logger.error(
				"This program can not run if there is no internet connectivity. Kindly make sure that PC is connected to the internet and then try again.")
			sys.exit(1)

		# check if port 53 is open . If not generate error and exit the program
		# use google site - 74.125.236.51 for checking dns connectivity
		if not check_dns_connectivity("74.125.236.51"):
			config.logger.error(
				'This program requires that Port 53 to be open for domain name queries (DNS). Kindly make sure that it is open and try again.')

		process_list = []
		pids = [pid for pid in os.listdir('/proc') if pid.isdigit()]
		for pid in pids:
			if os.path.isfile('/proc/' + str(pid) + '/exe'):
				process = os.path.realpath('/proc/' + str(pid) + '/exe')
				process_path_name = os.path.split(process)
				process_path, process_name = process_path_name
				filesize = os.path.getsize('/proc/' + str(pid) + '/exe')
				md5_result = md5checksum(process, config)
				process_state = process_status(pid)
				created_on, last_modified = file_timestamps(process)
				# modify date to python datetime
				created_on = datetime.datetime.strptime(created_on, '%a %b %d %H:%M:%S %Y')
				last_modified = datetime.datetime.strptime(last_modified, '%a %b %d %H:%M:%S %Y')
				process_list.append((
					pid, process, filesize, md5_result, process_path, process_name, process_state, created_on,
					last_modified))

				#print created_on,last_modified
		cymru_malware_processes = None
		virustotal_malware_processes = None

		if config.use_cymru_database.lower() == 'true':
			# check if the process is malware using Team Cymru registry
			cymru_malware_processes = malware_processes_using_team_cymru(config, process_list, sqlite_instance)
			#print cymru_malware_processes
		if config.use_virustotal_database.lower() == 'true':
			# check using virustotal url
			virustotal_malware_processes = malware_processes_using_virustotal(config, process_list, sqlite_instance)
			#print virustotal_malware_processes
		# write results to a file
		write_malware_results(config.results_file, cymru_malware_processes, virustotal_malware_processes)
		# send a E-mail
		mail_to_admin(config.results_file, config)

		sqlite_instance.disconnection()
		sys.exit(1)

	except Exception, e:
		config.logger.error("An error is encounterd during the execution of program - %s" % str(e))

"""
# response from Team cymru for malware entry
[psj@localhost ~]$ nslookup -querytype=TXT 733a48a9cb49651d72fe824ca91e8d00.malware.hash.cymru.com
Server:		8.8.4.4
Address:	8.8.4.4#53

Non-authoritative answer:
733a48a9cb49651d72fe824ca91e8d00.malware.hash.cymru.com	text = "1277221946 79"

Authoritative answers can be found from:

# response from Team cymru for non-malware entry
[psj@localhost ~]$ nslookup -querytype=TXT 733a48a9cb49651d72fe824ca91e8d01.malware.hash.cymru.com
Server:		8.8.4.4
Address:	8.8.4.4#53

** server can't find 733a48a9cb49651d72fe824ca91e8d01.malware.hash.cymru.com: NXDOMAIN


# response from virustotal
#{"response_code": 0, "resource": "fe387f7e606673dc94a381a1cadee59f", "verbose_msg": "The requested resource is not among the finished, queued or pending scans"}

Out[10]: '{"scans": {"TotalDefense": {"detected": true, "version": "37.0.10395", "result": "Win32/Linkbot.SC", "update": "20130426"}, "MicroWorld-eScan": {"detected": true, "version": "12.0.250.0", "result": "Trojan.Generic.1628803", "update": "20130428"}, "nProtect": {"detected": true, "version": "2013-04-27.01", "result": "Worm/W32.Kolabc.64000", "update": "20130427"}, "CAT-QuickHeal": {"detected": true, "version": "12.00", "result": "Backdoor.Nepoe.dn.n4", "update": "20130427"}, "McAfee": {"detected": true, "version": "5.400.0.1158", "result": "Downloader-BZB", "update": "20130428"}, "Malwarebytes": {"detected": true, "version": "1.75.0.1", "result": "Trojan.Downloader", "update": "20130427"}, "K7AntiVirus": {"detected": true, "version": "9.166.8590", "result": "Riskware", "update": "20130426"}, "K7GW": {"detected": false, "version": "12.7.0.12", "result": null, "update": "20130426"}, "TheHacker": {"detected": true, "version": "None", "result": "W32/Kolabc.bnj", "update": "20130426"}, "NANO-Antivirus": {"detected": true, "version": "0.24.0.52214", "result": "Trojan.Win32.Sdbot.begsyp", "update": "20130427"}, "F-Prot": {"detected": true, "version": "4.7.1.166", "result": "W32/Worm.NMT", "update": "20130427"}, "Symantec": {"detected": true, "version": "20121.3.0.76", "result": "W32.Spybot.Worm", "update": "20130427"}, "Norman": {"detected": true, "version": "7.01.04", "result": "Suspicious_Gen3.VGAD", "update": "20130426"}, "ByteHero": {"detected": false, "version": "1.0.0.1", "result": null, "update": "20130426"}, "TrendMicro-HouseCall": {"detected": true, "version": "9.700.0.1001", "result": "WORM_POEBOT.AKE", "update": "20130428"}, "Avast": {"detected": true, "version": "6.0.1289.0", "result": "Win32:Nepoe-K [Trj]", "update": "20130428"}, "eSafe": {"detected": true, "version": "7.0.17.0", "result": "Win32.Kolabc.bnj", "update": "20130423"}, "ClamAV": {"detected": false, "version": "0.97.3.0", "result": null, "update": "20130427"}, "Kaspersky": {"detected": true, "version": "9.0.0.837", "result": "Backdoor.Win32.Nepoe.dn", "update": "20130428"}, "BitDefender": {"detected": true, "version": "7.2", "result": "Trojan.Generic.1628803", "update": "20130428"}, "Agnitum": {"detected": true, "version": "5.5.1.3", "result": "Worm.Kolabc!JQO7hizifwc", "update": "20130427"}, "ViRobot": {"detected": true, "version": "2011.4.7.4223", "result": "Worm.Win32.Net-Kolabc.64000", "update": "20130427"}, "Sophos": {"detected": true, "version": "4.88.0", "result": "Mal/Generic-S", "update": "20130427"}, "Comodo": {"detected": true, "version": "16085", "result": "TrojWare.Win32.Trojan.NSPM.~gen", "update": "20130427"}, "F-Secure": {"detected": true, "version": "11.0.19020.35", "result": "Trojan.Generic.1628803", "update": "20130428"}, "DrWeb": {"detected": true, "version": "", "result": "BackDoor.IRC.Sdbot.2665", "update": "20130428"}, "VIPRE": {"detected": true, "version": "17244", "result": "Trojan.Win32.Ircbot!cobra (v)", "update": "20130428"}, "AntiVir": {"detected": true, "version": "7.11.74.166", "result": "TR/Crypt.NSPM.Gen", "update": "20130427"}, "TrendMicro": {"detected": true, "version": "9.740.0.1012", "result": "WORM_POEBOT.AKE", "update": "20130427"}, "McAfee-GW-Edition": {"detected": true, "version": "2012.1", "result": "Heuristic.LooksLike.Win32.Suspicious.C", "update": "20130427"}, "Emsisoft": {"detected": true, "version": "3.0.0.575", "result": "Trojan.Generic.1628803 (B)", "update": "20130428"}, "Jiangmin": {"detected": true, "version": "16.0.100", "result": "Net-Worm.Kolabc.hx", "update": "20130427"}, "Antiy-AVL": {"detected": false, "version": "2.0.3.7", "result": null, "update": "20130427"}, "Kingsoft": {"detected": true, "version": "2013.4.9.267", "result": "Win32.Hack.Nepoe.dn.(kcloud)", "update": "20130422"}, "Microsoft": {"detected": true, "version": "1.9402", "result": "Backdoor:Win32/Poebot.gen", "update": "20130428"}, "SUPERAntiSpyware": {"detected": false, "version": "5.6.0.1008", "result": null, "update": "20130427"}, "GData": {"detected": true, "version": "22", "result": "Trojan.Generic.1628803", "update": "20130428"}, "Commtouch": {"detected": false, "version": "5.4.1.7", "result": null, "update": "20130427"}, "AhnLab-V3": {"detected": true, "version": "2013.04.28.00", "result": "Win32/Kolabc.worm.64000", "update": "20130427"}, "VBA32": {"detected": true, "version": "3.12.20.2", "result": "Backdoor.VanBot", "update": "20130427"}, "PCTools": {"detected": true, "version": "9.0.0.2", "result": "Backdoor.Nepoe", "update": "20130427"}, "ESET-NOD32": {"detected": true, "version": "8274", "result": "Win32/Poebot", "update": "20130427"}, "Ikarus": {"detected": true, "version": "T3.1.4.0.0", "result": "Trojan-Downloader.Win32.Banload", "update": "20130427"}, "Fortinet": {"detected": false, "version": "5.0.43.0", "result": null, "update": "20130428"}, "AVG": {"detected": true, "version": "10.0.0.1190", "result": "BackDoor.RBot.KB", "update": "20130427"}, "Panda": {"detected": true, "version": "10.0.3.5", "result": "W32/Kolabc.Q.worm", "update": "20130427"}}, "scan_id": "b018706f57937136a2f61421c5a7a9f4ce8c89c3670ae4814491473184545962-1367105107", "sha1": "5b63d3bf46aec2126932d8a683ca971c56f7d717", "resource": "cbed16069043a0bf3c92fff9a99cccdc", "response_code": 1, "scan_date": "2013-04-27 23:25:07", "permalink": "https://www.virustotal.com/file/b018706f57937136a2f61421c5a7a9f4ce8c89c3670ae4814491473184545962/analysis/1367105107/", "verbose_msg": "Scan finished, scan information embedded in this object", "total": 46, "positives": 39, "sha256": "b018706f57937136a2f61421c5a7a9f4ce8c89c3670ae4814491473184545962", "md5": "cbed16069043a0bf3c92fff9a99cccdc"}'

{'md5': 'cbed16069043a0bf3c92fff9a99cccdc',
 'permalink': 'https://www.virustotal.com/file/b018706f57937136a2f61421c5a7a9f4ce8c89c3670ae4814491473184545962/analysis/1367105107/',
 'positives': 39,
 'resource': 'cbed16069043a0bf3c92fff9a99cccdc',
 'response_code': 1,
 'scan_date': '2013-04-27 23:25:07',
 'scan_id': 'b018706f57937136a2f61421c5a7a9f4ce8c89c3670ae4814491473184545962-1367105107',
 'scans': {'AVG': {'detected': True,
   'result': 'BackDoor.RBot.KB',
   'update': '20130427',
   'version': '10.0.0.1190'},
  'Agnitum': {'detected': True,
   'result': 'Worm.Kolabc!JQO7hizifwc',
   'update': '20130427',
   'version': '5.5.1.3'},
  'AhnLab-V3': {'detected': True,
   'result': 'Win32/Kolabc.worm.64000',
   'update': '20130427',
   'version': '2013.04.28.00'},
  'AntiVir': {'detected': True,
   'result': 'TR/Crypt.NSPM.Gen',
   'update': '20130427',
   'version': '7.11.74.166'},
  'Antiy-AVL': {'detected': False,
   'result': None,
   'update': '20130427',
   'version': '2.0.3.7'},
  'Avast': {'detected': True,
   'result': 'Win32:Nepoe-K [Trj]',
   'update': '20130428',
   'version': '6.0.1289.0'},
  'BitDefender': {'detected': True,
   'result': 'Trojan.Generic.1628803',
   'update': '20130428',
   'version': '7.2'},
  'ByteHero': {'detected': False,
   'result': None,
   'update': '20130426',
   'version': '1.0.0.1'},
  'CAT-QuickHeal': {'detected': True,
   'result': 'Backdoor.Nepoe.dn.n4',
   'update': '20130427',
   'version': '12.00'},
  'ClamAV': {'detected': False,
   'result': None,
   'update': '20130427',
   'version': '0.97.3.0'},
  'Commtouch': {'detected': False,
   'result': None,
   'update': '20130427',
   'version': '5.4.1.7'},
  'Comodo': {'detected': True,
   'result': 'TrojWare.Win32.Trojan.NSPM.~gen',
   'update': '20130427',
   'version': '16085'},
  'DrWeb': {'detected': True,
   'result': 'BackDoor.IRC.Sdbot.2665',
   'update': '20130428',
   'version': u''},
  'ESET-NOD32': {'detected': True,
   'result': 'Win32/Poebot',
   'update': '20130427',
   'version': '8274'},
  'Emsisoft': {'detected': True,
   'result': 'Trojan.Generic.1628803 (B)',
   'update': '20130428',
   'version': '3.0.0.575'},
  'F-Prot': {'detected': True,
   'result': 'W32/Worm.NMT',
   'update': '20130427',
   'version': '4.7.1.166'},
  'F-Secure': {'detected': True,
   'result': 'Trojan.Generic.1628803',
   'update': '20130428',
   'version': '11.0.19020.35'},
  'Fortinet': {'detected': False,
   'result': None,
   'update': '20130428',
   'version': '5.0.43.0'},
  'GData': {'detected': True,
   'result': 'Trojan.Generic.1628803',
   'update': '20130428',
   'version': '22'},
  'Ikarus': {'detected': True,
   'result': 'Trojan-Downloader.Win32.Banload',
   'update': '20130427',
   'version': 'T3.1.4.0.0'},
  'Jiangmin': {'detected': True,
   'result': 'Net-Worm.Kolabc.hx',
   'update': '20130427',
   'version': '16.0.100'},
  'K7AntiVirus': {'detected': True,
   'result': 'Riskware',
   'update': '20130426',
   'version': '9.166.8590'},
  'K7GW': {'detected': False,
   'result': None,
   'update': '20130426',
   'version': '12.7.0.12'},
  'Kaspersky': {'detected': True,
   'result': 'Backdoor.Win32.Nepoe.dn',
   'update': '20130428',
   'version': '9.0.0.837'},
  'Kingsoft': {'detected': True,
   'result': 'Win32.Hack.Nepoe.dn.(kcloud)',
   'update': '20130422',
   'version': '2013.4.9.267'},
  'Malwarebytes': {'detected': True,
   'result': 'Trojan.Downloader',
   'update': '20130427',
   'version': '1.75.0.1'},
  'McAfee': {'detected': True,
   'result': 'Downloader-BZB',
   'update': '20130428',
   'version': '5.400.0.1158'},
  'McAfee-GW-Edition': {'detected': True,
   'result': 'Heuristic.LooksLike.Win32.Suspicious.C',
   'update': '20130427',
   'version': '2012.1'},
  'MicroWorld-eScan': {'detected': True,
   'result': 'Trojan.Generic.1628803',
   'update': '20130428',
   'version': '12.0.250.0'},
  'Microsoft': {'detected': True,
   'result': 'Backdoor:Win32/Poebot.gen',
   'update': '20130428',
   'version': '1.9402'},
  'NANO-Antivirus': {'detected': True,
   'result': 'Trojan.Win32.Sdbot.begsyp',
   'update': '20130427',
   'version': '0.24.0.52214'},
  'Norman': {'detected': True,
   'result': 'Suspicious_Gen3.VGAD',
   'update': '20130426',
   'version': '7.01.04'},
  'PCTools': {'detected': True,
   'result': 'Backdoor.Nepoe',
   'update': '20130427',
   'version': '9.0.0.2'},
  'Panda': {'detected': True,
   'result': 'W32/Kolabc.Q.worm',
   'update': '20130427',
   'version': '10.0.3.5'},
  'SUPERAntiSpyware': {'detected': False,
   'result': None,
   'update': '20130427',
   'version': '5.6.0.1008'},
  'Sophos': {'detected': True,
   'result': 'Mal/Generic-S',
   'update': '20130427',
   'version': '4.88.0'},
  'Symantec': {'detected': True,
   'result': 'W32.Spybot.Worm',
   'update': '20130427',
   'version': '20121.3.0.76'},
  'TheHacker': {'detected': True,
   'result': 'W32/Kolabc.bnj',
   'update': '20130426',
   'version': 'None'},
  'TotalDefense': {'detected': True,
   'result': 'Win32/Linkbot.SC',
   'update': '20130426',
   'version': '37.0.10395'},
  'TrendMicro': {'detected': True,
   'result': 'WORM_POEBOT.AKE',
   'update': '20130427',
   'version': '9.740.0.1012'},
  'TrendMicro-HouseCall': {'detected': True,
   'result': 'WORM_POEBOT.AKE',
   'update': '20130428',
   'version': '9.700.0.1001'},
  'VBA32': {'detected': True,
   'result': 'Backdoor.VanBot',
   'update': '20130427',
   'version': '3.12.20.2'},
  'VIPRE': {'detected': True,
   'result': 'Trojan.Win32.Ircbot!cobra (v)',
   'update': '20130428',
   'version': '17244'},
  'ViRobot': {'detected': True,
   'result': 'Worm.Win32.Net-Kolabc.64000',
   'update': '20130427',
   'version': '2011.4.7.4223'},
  'eSafe': {'detected': True,
   'result': 'Win32.Kolabc.bnj',
   'update': '20130423',
   'version': '7.0.17.0'},
  'nProtect': {'detected': True,
   'result': 'Worm/W32.Kolabc.64000',
   'update': '20130427',
   'version': '2013-04-27.01'}},
 'sha1': '5b63d3bf46aec2126932d8a683ca971c56f7d717',
 'sha256': 'b018706f57937136a2f61421c5a7a9f4ce8c89c3670ae4814491473184545962',
 'total': 46,
 'verbose_msg': 'Scan finished, scan information embedded in this object'}
"""
