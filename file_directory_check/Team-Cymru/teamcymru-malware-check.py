#! /usr/bin/env python
"""
 This module checks files/directories for presence of malware using Team Cymru service:
  Malware hash registry -http://www.team-cymru.org/Services/MHR/
  A big thanks to Team Cymru team for providing this free service.
"""

import urllib2
import hashlib
import subprocess
import time
import datetime
import logging
import logging.handlers
import argparse
import ConfigParser
import os
import sys


def setup_logging():
	""" set up logging"""
	#logging.basicConfig(level=logging.INFO) # (level=logging.DEBUG)
	logging.basicConfig(level=logging.ERROR)
	logger = logging.getLogger(__name__)

	# set up file handler
	#handler = logging.FileHandler('netstat-monitor.log')
	handler = logging.handlers.RotatingFileHandler('teamcymru-malware-check.log', maxBytes=20000, backupCount=5)
	handler.setLevel(logging.INFO) # logging format
	formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
	handler.setFormatter(formatter)

	# add the handlers to the logger
	logger.addHandler(handler)
	return logger


def commandline_options(log_instance):
	""" command line arguments """
	args = None
	try:
		# good tutorial on argparse - http://pymotw.com/2/argparse/
		parser = argparse.ArgumentParser(description='This program checks the given file or directory for presence of any \
        malware using TeamCymru DNS services.')

		parser.add_argument('--config', action='store', required=True, help='Configuration file', dest='config_file')
		parser.add_argument('--file', action='store', required=False, help='check the file for presence of any malware',
		                    dest='check_file')
		parser.add_argument('--dir', action='store', required=False,
		                    help='check the directory for presence of any malware', dest='check_directory')
		args, unknown = parser.parse_known_args()

		if not args.config_file:
			args.error("Error - Please enter full path of configuration file.")

	except Exception, e:
		log_instance.error('Error while parsing command line arguments - %s' % str(e).strip(), exc_info=True)

	return args


def _confGet(conf, section, option):
	"""returns the value of the configuration option or None if not set"""
	try:
		return conf.get(section, option)
	except ConfigParser.Error:
		return None # ignore missing values


def config_options(config_file, log_instance):
	"""Read configuration file"""

	try:
		conf = ConfigParser.ConfigParser()
		conf.read(config_file)

		user_proxy_option = _confGet(conf, "general", "use_proxy") or None
		user_email_option = _confGet(conf, "general", "use_email") or None
		timeout = _confGet(conf, "general", "timeout_interval") or 2
		poll_interval = _confGet(conf, "general", "poll_interval") or 1
		team_cymru_url = _confGet(conf, "general", "team_cymru_url") or None
		log_level = _confGet(conf, "general", "log_level") or logging.INFO

		# proxy
		proxy_user = _confGet(conf, "proxy", "user") or None
		proxy_password = _confGet(conf, "proxy", "password") or None
		proxy_server = _confGet(conf, "proxy", "server") or None
		proxy_port = _confGet(conf, "proxy", "port") or 8080
		# e-mail
		email_user = _confGet(conf, "e-mail", "user") or None
		email_password = _confGet(conf, "e-mail", "password") or None
		email_server = _confGet(conf, "e-mail", "server") or None
		email_port = _confGet(conf, "e-mail", "port") or None

		# set log level
		log_instance.setLevel(int(log_level))

		return timeout, poll_interval, team_cymru_url, user_proxy_option, user_proxy_option, proxy_user, proxy_password, proxy_server, \
		       proxy_port, email_user, email_password, email_server, email_port

	except Exception, e:
		log_instance.error('Error while reading configuration file - %s' % str(e).strip(), exc_info=True)


def check_dns_connectivity(ip):
	import socket

	host = None
	try:
		host = socket.gethostbyaddr(ip)
		return True
	except Exception:
		return False


def _setup_proxy(name, port, user, passwd):
	opener = None
	proxy = urllib2.ProxyHandler({'http': 'http://' + user + ':' + passwd + '@' + name + ':' + port,
	                              'https': 'http://' + user + ':' + passwd + '@' + name + ':' + port})
	auth = urllib2.HTTPBasicAuthHandler()
	opener = urllib2.build_opener(proxy, auth, urllib2.HTTPHandler)
	return opener


def check_internet_connectivity(log_instance, use_proxy, proxy_user, proxy_password, proxy_server, proxy_port):
	url = 'http://www.google.com'
	proxy_handler = None
	if use_proxy.lower() == "true":
		proxy_handler = _setup_proxy(proxy_server, proxy_port, proxy_user, proxy_password)
		urllib2.install_opener(proxy_handler)
	try:
		conn = urllib2.urlopen(url)
		response = conn.read()

		if response:
			return True
		else:
			return False

	except Exception, e:
		log_instance.error("Error in checking internet connectivity - %s" % str(e).strip())


def md5checksum(log_instance, filePath):
	"""compute MD5 checksum"""
	file_read_bytes = 8192
	try:
		with open(filePath, 'rb') as f:
			m = hashlib.md5()
			while True:
				data = f.read(file_read_bytes)
				if not data:
					break
				m.update(data)
			log_instance.debug("file - %s and its md5 hash value is %s" % (filePath, m.hexdigest()))
			return m.hexdigest()
	except Exception, e:
		log_instance.error("Error while calculating md5 hash for file - %s " % filePath)


def run_command(log_instance, exec_command, timeout=10, poll_seconds=0.25):
	""" run the command as a seperate process"""
	try:
		proc = subprocess.Popen(exec_command, bufsize=0, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
		deadline = time.time() + float(timeout)
		while time.time() < deadline and proc.poll() == None:
			time.sleep(float(poll_seconds))
		stdout, stderr = proc.communicate()
		return stdout, stderr
	except Exception, e:
		log_instance.error("Error while executing the command - %s" % exec_command)


def query_malware_hash_registry(log_instance, md5_hash, timeout_interval, polling_interval):
	""" query malware hash registry to check whether the process is malware"""
	try:
		_cmd = "/usr/bin/nslookup -querytype=TXT " + md5_hash + '.' + team_cymru_url #'.malware.hash.cymru.com'
		response, error = run_command(log_instance, _cmd, timeout_interval, polling_interval)
		log_instance.debug("Team Cymru malware hash registry response - %s" % response)

		if error:
			log_instance.error("Error while executing command - %s and the error is - %s" % (_cmd, error))

		return response, error

	except Exception, e:
		log_instance.error("Error while executing command - %s and the error is - %s" % (_cmd, e))


def process_team_cymru_response(log_instance, md5_hash, team_cymru_url, response):
	try:
		response = response.split('\n')
		for item in response:
			if item.find(md5_hash + '.' + team_cymru_url) >= 0:
				malware_line = item
				if malware_line.lower().find('nxdomain') >= 0:
					# no malware present: percent_detection=0,last_detection=current time
					return False, datetime.datetime.now(), 0
				else:
					malware_details = malware_line.strip().split('=')[1]
					last_updated, percent_detection = malware_details.replace('"', '').strip().split(' ')
					#print last_updated,percent_detection
					return True, datetime.datetime.fromtimestamp(long(last_updated)), percent_detection

	except Exception, e:
		log_instance.error("Error while processing Team Cymru's response - %s and the error is - %s" % (response, e))


def file_check(log_instance, test_file, timeout, poll_interval, team_cymru_url):
	md5_file = md5checksum(log_instance, test_file)
	if md5_file:
		registry_response, registry_error = query_malware_hash_registry(log_instance, md5_file, timeout, poll_interval)
		ismalware, last_detection_time, percent_detection = process_team_cymru_response(log_instance, md5_file,
		                                                                                team_cymru_url,
		                                                                                registry_response)
	else:
		log_instance.error("Error while computing md5 of file %s. Probably, file does not exists")
		return None
	#print ismalware, last_detection_time, percent_detection
	if ismalware:
		#print "As per Team Cymru Malware Hash Registry, the file %s contains a malware."
		log_instance.info("As per Team Cymru Malware Hash Registry, the file %s contains a malware.")
	else:
		#print "As per Team Cymru Malware Hash Registry, there is no malware in the file %s."%test_file
		log_instance.info("As per Team Cymru Malware Hash Registry, there is no malware in the file %s." % test_file)
	return ismalware


def old_get_files_from_path(p):
	for root, dirs, files in os.walk(p):
		for d in dirs:
			for f in files:
				yield os.path.join(root, d, f)


def get_files_from_path(p):
	for root, dirs, files in os.walk(p):
		for f in files:
			yield os.path.join(root, f)


def directory_check(log_instance, test_dir, timeout, poll_interval, team_cymru_url):
	count = 0
	malware_files = []
	for dir_file in get_files_from_path(test_dir):
		#print dir_file
		result = file_check(log_instance, dir_file, timeout, poll_interval, team_cymru_url)
		if result:
			count = count + 1
			malware_files.append(dir_file)
	return count, malware_files


def mail_to_user(log_instance, email_user, email_password, email_server, message):
	import smtplib, base64
	from email.mime.multipart import MIMEMultipart
	# Import the email modules that we'll need
	from email.mime.text import MIMEText

	from_mail = email_user + '@' + email_server
	to_mail = email_user + '@' + email_server
	msg = MIMEMultipart('alternative')
	msg['Subject'] = 'Detection of malware files on your PC'
	msg['From'] = email_user + '@' + email_server
	msg['To'] = email_user + '@' + email_server
	part1 = MIMEText(message, 'plain')
	#part2 = MIMEText(main_msg_html,'html')
	msg.attach(part1)
	#msg.attach(part2)
	try:
		so = smtplib.SMTP(email_server)
		so.docmd("AUTH LOGIN", base64.b64encode(email_user))
		so.docmd(base64.b64encode(email_password), "")
		#so.login(email_user,email_password)
		try:
			so.sendmail(from_mail, to_mail, msg.as_string())
		except Exception, e:
			log_instance.error("Suspicious files: %s" % message)
			log_instance.error(
				"There is an error while sending e-mail about suspicious files as detected by Virustotal service %s" % e)
		finally:
			so.close()
	except Exception, e:
		log_instance.error(
			"Unable to send E-mail that lists suspicious files as detected by Virustotal service. - %s" % e)


if __name__ == '__main__':

	try:
		# setup logging
		log_instance = setup_logging()
		# read command line arguments
		cmd_args = commandline_options(log_instance)

		# check if config file exists. if yes, read configuaration parameters
		if os.path.isfile(cmd_args.config_file):
			timeout, poll_interval, team_cymru_url, user_proxy_option, user_email_option, proxy_user, proxy_password, \
			proxy_server, proxy_port, email_user, email_password, email_server, \
			email_port = config_options(cmd_args.config_file, log_instance)

			# check internet connectivity
			log_instance.info("Checking internet connectivity...")
			result = check_internet_connectivity(log_instance, user_proxy_option, proxy_user, proxy_password,
			                                     proxy_server,
			                                     proxy_port)
			if not result:
				log_instance.error("It seems that there is no internet connectivity from the system. Kindly check the network settings \
                 and try again.")
				sys.exit(1)
			else:
				log_instance.info("Checking internet connectivity is done now.")

			# check dns connectivity
			log_instance.info("Checking DNS connectivity ...")
			result = check_dns_connectivity('8.8.8.8')
			if not result:
				log_instance.error("It seems that the DNS port(53) is blocked in the firewall configured on from the system.\
                 Kindly check the network firewall settings and try again.")
				sys.exit(1)
			else:
				log_instance.info("Checking DNS connectivity is done now.")

			test_file = cmd_args.check_file
			test_dir = cmd_args.check_directory

			# check if file exists
			if test_file and not os.path.isfile(test_file):
				log_instance.error(
					"The file %s you specified in the command line option (--file) does not exist on the system.\
                    Kindly enter correct filename and try again")

			# check if directory exists
			if test_dir and not os.path.isdir(test_dir):
				log_instance.error(
					"The directory %s you specified in the command line option(--dir) does not exist on the system.\
                    Kindly enter correct directory and try again")

			if ( not test_file and not test_dir):
				log_instance.warning("For malware checking using Team Cymru service, please specify the file \
                using --file option or any directory using --dir option.")
				sys.exit(1)

			log_instance.info("Test file - %s" % test_file)
			log_instance.info("Test directory - %s" % test_dir)

			if test_file:
				result = file_check(log_instance, test_file, timeout, poll_interval, team_cymru_url)
				if result:
					log_instance.info("As per Team Cymru's Malware Hash Registry, the file %s contains a malware. \
	                Please use anti-malware/anti-virus programs to remove it at the earliest." % test_file)

					message = """ The file %s is found to be suspicious as per Team Cymru Malware Hash Registry Service. \
					 Kindly check the file using anti-virus/anti-malware softwares. \n """ % test_file
					mail_to_user(log_instance, email_user, email_password, email_server, message)

				else:
					log_instance.info("Congratulations! No malware is found in the file -%s" % test_file)
					print "Congratulations! No malware is found in the file -%s" % test_file

			elif test_dir:
				result, malware_files = directory_check(log_instance, test_dir, timeout, poll_interval, team_cymru_url)
				if result > 0:
					log_instance.info("As per Team Cymru's Malware Hash Registry, the directory %s contains %s a malware. \
                    Please use anti-malware/anti-virus programs to remove it at the earliest." % (test_dir, result))
					if malware_files:
						message = """ The following files are found to be suspicious as per Team Cymru Malware service. \
						Kindly check these files using anti-virus/anti-malware softwares. \n
	                     %s
	                    """ % ' \n'.join(malware_files)
						mail_to_user(log_instance, email_user, email_password, email_server, message)
				else:
					log_instance.info("Congratulations! No malware is found in the directory - %s " % test_dir)
					print "Congratulations! No malware is found in the directory - %s " % test_dir

		else:
			log_instance.warning("It seems that you have not given configuration file in the command line option!")

	except Exception, e:
		log_instance.error(
		"There is an error while checking the malware using Team Cymru Malware Hash Registry Service - %s" % e)