#! /usr/bin/env python
"""
 This module checks files/directories for presence of malware/virus etc using Google Virustotal service:
  Virustotal API file check -https://www.virustotal.com/vtapi/v2/file/report
  A big thanks to Google Virustotal for providing this free service.
"""

import urllib
import urllib2
import hashlib
import subprocess
import time
import simplejson
import logging
import logging.handlers
import argparse
import ConfigParser
import os
import sys


def setup_logging():
	""" set up logging"""
	#logging.basicConfig(level=logging.INFO) # (level=logging.DEBUG)
	logging.basicConfig(level=logging.ERROR)
	logger = logging.getLogger(__name__)

	# set up file handler
	#handler = logging.FileHandler('netstat-monitor.log')
	handler = logging.handlers.RotatingFileHandler('virustotal-check.log', maxBytes=20000, backupCount=5)
	handler.setLevel(logging.INFO) # logging format
	formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
	handler.setFormatter(formatter)

	# add the handlers to the logger
	logger.addHandler(handler)
	return logger


def commandline_options(log_instance):
	""" command line arguments """
	args = None
	try:
		# good tutorial on argparse - http://pymotw.com/2/argparse/
		parser = argparse.ArgumentParser(description='This program checks the given file or directory for presence of any \
        malware using Google Virustotal service.')

		parser.add_argument('--config', action='store', required=True, help='Configuration file', dest='config_file')
		parser.add_argument('--file', action='store', required=False, help='check the file for presence of any malware',
		                    dest='check_file')
		parser.add_argument('--dir', action='store', required=False,
		                    help='check the directory for presence of any malware', dest='check_directory')
		args, unknown = parser.parse_known_args()

		if not args.config_file:
			args.error("Error - Please enter full path of configuration file.")

	except Exception, e:
		log_instance.error('Error while parsing command line arguments - %s' % str(e).strip(), exc_info=True)

	return args


def _confGet(conf, section, option):
	"""returns the value of the configuration option or None if not set"""
	try:
		return conf.get(section, option)
	except ConfigParser.Error:
		return None # ignore missing values


def config_options(config_file, log_instance):
	"""Read configuration file"""

	try:
		conf = ConfigParser.ConfigParser()
		conf.read(config_file)

		use_proxy = _confGet(conf, "general", "use_proxy") or None
		use_email = _confGet(conf, "general", "use_email") or None
		virustotal_url = _confGet(conf, "general", "virustotal_url") or None
		virustotal_key = _confGet(conf, "general", "virustotal_key") or None
		log_level = _confGet(conf, "general", "log_level") or logging.INFO

		# proxy
		proxy_user = _confGet(conf, "proxy", "user") or None
		proxy_password = _confGet(conf, "proxy", "password") or None
		proxy_server = _confGet(conf, "proxy", "server") or None
		proxy_port = _confGet(conf, "proxy", "port") or 8080
		# e-mail
		email_user = _confGet(conf, "e-mail", "user") or None
		email_password = _confGet(conf, "e-mail", "password") or None
		email_server = _confGet(conf, "e-mail", "server") or None
		email_port = _confGet(conf, "e-mail", "port") or None

		# set log level
		log_instance.setLevel(int(log_level))

		return virustotal_url, virustotal_key, use_proxy, use_email, proxy_user, proxy_password, proxy_server, \
		       proxy_port, email_user, email_password, email_server, email_port

	except Exception, e:
		log_instance.error('Error while reading configuration file - %s' % str(e).strip(), exc_info=True)


def check_dns_connectivity(ip):
	import socket

	host = None
	try:
		host = socket.gethostbyaddr(ip)
		return True
	except Exception:
		return False


def _setup_proxy(name, port, user, passwd):
	opener = None
	proxy = urllib2.ProxyHandler({'http': 'http://' + user + ':' + passwd + '@' + name + ':' + port,
	                              'https': 'http://' + user + ':' + passwd + '@' + name + ':' + port})
	auth = urllib2.HTTPBasicAuthHandler()
	opener = urllib2.build_opener(proxy, auth, urllib2.HTTPHandler)
	return opener


def check_internet_connectivity(log_instance, use_proxy, proxy_user, proxy_password, proxy_server, proxy_port):
	url = 'http://www.google.com'
	proxy_handler = None
	if use_proxy.lower() == "true":
		proxy_handler = _setup_proxy(proxy_server, proxy_port, proxy_user, proxy_password)
		urllib2.install_opener(proxy_handler)
	try:
		conn = urllib2.urlopen(url)
		response = conn.read()

		if response:
			return True
		else:
			return False

	except Exception, e:
		log_instance.error("Error in checking internet connectivity - %s" % str(e).strip())


def md5checksum(log_instance, filePath):
	"""compute MD5 checksum"""
	file_read_bytes = 8192
	try:
		with open(filePath, 'rb') as f:
			m = hashlib.md5()
			while True:
				data = f.read(file_read_bytes)
				if not data:
					break
				m.update(data)
			log_instance.debug("file - %s and its md5 hash value is %s" % (filePath, m.hexdigest()))
			return m.hexdigest()
	except Exception, e:
		log_instance.error("Error while calculating md5 hash for file - %s " % filePath)


def file_check(log_instance, test_file, virustotal_url, virustotal_key, proxy_handler):
	try:
		ismalware = False
		md5_file = md5checksum(log_instance, test_file)
		if md5_file:
			ismalware, response = virustotal_filechecker(virustotal_url, virustotal_key, test_file, md5_file,
			                                             proxy_handler)
		else:
			log_instance.error("Error while computing md5 of file %s. Probably, file does not exists")
			return None
			#print ismalware, last_detection_time, percent_detection
		if ismalware:
			#print "As per Team Cymru Malware Hash Registry, the file %s contains a malware."
			log_instance.info("As per Virustotal database, the file %s contains a malware.")
			log_instance.info(
				"As per Virustotal database, virus analysis results of the file %s are: %s" % (test_file, response))
		else:
			#print "As per Team Cymru Malware Hash Registry, there is no malware in the file %s."%test_file
			log_instance.info("As per Google Virustotal database, there is no malware in the file %s." % test_file)
		return ismalware
	except Exception, e:
		log_instance.error("Error while checking the file % in Virustotal database - %s " % (test_file, str(e)))


def get_files_from_path(p):
	for root, dirs, files in os.walk(p):
		for f in files:
			yield os.path.join(root, f)


def directory_check(log_instance, test_dir, virustotal_url, virustotal_key, proxy_handler):
	count = 0
	malware_files = []
	for dir_file in get_files_from_path(test_dir):
		#print dir_file
		result = file_check(log_instance, dir_file, virustotal_url, virustotal_key, proxy_handler)
		if result:
			count = count + 1
			malware_files.append(dir_file)
			# only 4 requests per minute are allowed in Google Virustotal API service.
		time.sleep(15)
	return count, malware_files


def virustotal_filechecker(url, api_key, filename, md5_hash, proxy_handler=None):
	"""
        Check VirusTotal report for the given file's - MD5 hash
    """
	response = None
	Ismalware = False
	response_dict = None

	# request using proxy or not
	if proxy_handler:
		urllib2.install_opener(proxy_handler)
		# POST request parameters
	post_parameters = {"resource": md5_hash, "apikey": api_key}
	encoded_data = urllib.urlencode(post_parameters)
	req = urllib2.Request(url, encoded_data)
	try:
		response = urllib2.urlopen(req)
	except Exception, e:
		log_instance.error("Error while getting VirusTotal report for file - %s - %s." % (filename, str(e).strip()))

	report_result = response.read()
	# http response headers
	log_instance.debug("Http response headers:\n%s" % (response.info()))
	# http status codes
	log_instance.debug("Http response code:\n%s" % (response.getcode()))
	# http response
	log_instance.debug("Http response:\n%s" % (report_result))
	response_dict = simplejson.loads(report_result)
	if response_dict['response_code'] != 0:
		if response_dict['positives'] != 0:
			Ismalware = True
		else:
			Ismalware = False
	else:
		Ismalware = False
		response_dict = []
		#if response_dict['response_code']==0:
		# print "The file is not a malware as no result could be found in the virustotal database."
		#elif response_dict['response_code']==1:
		# print "The file is a malware and %s virus engines have detected it. Detailed results found in the virustotal database are:" %response_dict['positives']
		# for key,value in json['scans'].items():
		# print key,value['result']
	return Ismalware, response_dict


def mail_to_user(log_instance, email_user, email_password, email_server, message):
	import smtplib, base64
	from email.mime.multipart import MIMEMultipart
	# Import the email modules that we'll need
	from email.mime.text import MIMEText

	from_mail = email_user + '@' + email_server
	to_mail = email_user + '@' + email_server
	msg = MIMEMultipart('alternative')
	msg['Subject'] = 'Detection of malware files on your PC'
	msg['From'] = email_user + '@' + email_server
	msg['To'] = email_user + '@' + email_server
	part1 = MIMEText(message, 'plain')
	#part2 = MIMEText(main_msg_html,'html')
	msg.attach(part1)
	#msg.attach(part2)
	try:
		so = smtplib.SMTP(email_server)
		so.docmd("AUTH LOGIN", base64.b64encode(email_user))
		so.docmd(base64.b64encode(email_password), "")
		#so.login(email_user,email_password)
		try:
			so.sendmail(from_mail, to_mail, msg.as_string())
		except Exception, e:
			log_instance.error("Suspicious files: %s" % message)
			log_instance.error(
				"There is an error while sending e-mail about suspicious files as detected by Virustotal service %s" % e)
		finally:
			so.close()
	except Exception, e:
		log_instance.error(
			"Unable to send E-mail that lists suspicious files as detected by Virustotal service. - %s" % e)


if __name__ == '__main__':

	try:
		# setup logging
		log_instance = setup_logging()

		# read command line arguments
		cmd_args = commandline_options(log_instance)

		# check if config file exists. if yes, read configuaration parameters
		if os.path.isfile(cmd_args.config_file):
			virustotal_url, virustotal_key, \
			use_proxy, use_email, proxy_user, proxy_password, proxy_server, proxy_port, \
			email_user, email_password, email_server, email_port = config_options(cmd_args.config_file, log_instance)

			log_instance.info("Checking internet connectivity...")
			# check internet connectivity
			result = check_internet_connectivity(log_instance, use_proxy, proxy_user, proxy_password,
			                                     proxy_server,
			                                     proxy_port)
			if not result:
				log_instance.error("""It seems that there is no internet connectivity from the system. Kindly check the network settings
                 and try again.""")
				sys.exit(1)
			log_instance.info("Checking of internet connectivity is now done.")
			# check dns connectivity
			log_instance.info("Checking DNS connectivity....")
			result = check_dns_connectivity('8.8.8.8')
			if not result:
				log_instance.error("""It seems that DNS port(53) is blocked in the firewall configured on from the system.
                 Kindly check the network firewall settings and try again.""")
				sys.exit(1)

			log_instance.info("Checking of DNS connectivity is now done.")

			test_file = cmd_args.check_file
			test_dir = cmd_args.check_directory

			# check if file exists
			if test_file and not os.path.isfile(test_file):
				log_instance.error(
					"""The file %s you specified in the command option(--file) does not exist on the system.
                    Kindly enter correct filename with the full path and try again""")

			# check if directory exists
			if test_dir and not os.path.isdir(test_dir):
				log_instance.error(
					"""The directory %s you specified in the command option(--dir) does not exist on the system.
                    Kindly enter correct directory and try again""")

			if ( not test_file and not test_dir):
				log_instance.warning("""For detecting malware using Google Virustotal service, please specify the file using
                --file option or any directory using --dir option.""")
				sys.exit(1)

			log_instance.info("Test file - %s" % test_file)
			log_instance.info("Test directory - %s" % test_dir)

			if use_proxy.lower() == "true":
				proxy_handler = _setup_proxy(proxy_server, proxy_port, proxy_user, proxy_password)
			else:
				proxy_handler = None

			if test_file:
				result = file_check(log_instance, test_file, virustotal_url, virustotal_key, proxy_handler)
				if result:
					log_instance.info("""As per Google Virustotal database, the file %s contains a malware.
	                Please use anti-malware/anti-virus programs to remove it at the earliest. For more details, please
	                see the log file. """ % test_file)
					message = """ The file %s is found to be suspicious as per Virustotal service. Kindly check
	                     the file using anti-virus/anti-malware softwares. \n
	                    """ % test_file
					mail_to_user(log_instance, email_user, email_password, email_server, message)

				else:
					log_instance.info("Congratulations! No malware is found in the file -%s" % test_file)
					print "Congratulations! No malware is found in the file -%s" % test_file

			elif test_dir:
				result, malware_files = directory_check(log_instance, test_dir, virustotal_url, virustotal_key,
				                                        proxy_handler)
				if result > 0:
					log_instance.info("""As per Google Virustotal database, the directory %s contains %s a malware.
	                Please use anti-malware/anti-virus programs to remove it at the earliest. For more details, please
	                see the log file""" % (test_dir, result))
					if malware_files:
						message = """ The following files are found to be suspicious as per Virustotal service. Kindly check
	                     these files using anti-virus/anti-malware softwares. \n
	                     %s
	                    """ % ' \n'.join(malware_files)
					mail_to_user(log_instance, email_user, email_password, email_server, message)
				else:
					log_instance.info("Congratulations! No malware is found in the directory - %s " % test_dir)
					print "Congratulations! No malware is found in the directory - %s " % test_dir

		else:
			log_instance.warning("It seems that you have not specified configuration file in the command line option!")

	except Exception, e:
		log_instance.error("There is an error while checking the malware using Google Virustotal service - %s" % str(e))
